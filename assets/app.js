angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationCtrl",["$scope","$location",function(t,e){t.$on("login",function(n,o){t.currentUser=o,e.path("/")}),t.$on("ask",function(){e.path("/")})}]),angular.module("app").controller("AskCtrl",["$scope","QuestionsSvc",function(t,e){t.addQuestion=function(){t.questionTitle&&t.questionBody&&e.create({username:"dickeyxxx",title:t.questionTitle,body:t.questionBody}).success(function(){t.$emit("ask"),t.questionTitle=null,t.questionBody=null})}}]),angular.module("app").controller("LoginCtrl",["$scope","$location","UserSvc",function(t,e,n){t.login=function(e,o){t.errorMsg="",n.login(e,o).then(function(e){t.$emit("login",e)},function(){t.errorMsg="Incorrect username/password."})}}]),angular.module("app").controller("PostsCtrl",["$scope","PostsSvc",function(t,e){t.addPost=function(){t.postBody&&e.create({username:"dickeyxxx",body:t.postBody}).success(function(e){t.posts.unshift(e),t.postBody=null})},e.fetch().success(function(e){t.posts=e})}]),angular.module("app").service("PostsSvc",["$http",function(t){this.fetch=function(){return t.get("/api/posts")},this.create=function(e){return t.post("/api/posts",e)}}]),angular.module("app").controller("QuestionsCtrl",["$scope","QuestionsSvc",function(t,e){t.addQuestion=function(){t.questionTitle&&t.questionBody&&e.create({username:"dickeyxxx",title:t.questionTitle,body:t.questionBody}).success(function(e){t.questions.unshift(e),t.questionTitle=null,t.questionBody=null})},e.fetch().success(function(e){t.questions=e})}]),angular.module("app").service("QuestionsSvc",["$http",function(t){this.fetch=function(){return t.get("/api/questions")},this.create=function(e){return t.post("/api/questions",e)}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc",function(t,e){t.register=function(n,o){e.register(n,o).then(function(e){t.$emit("login",e)})}}]),angular.module("app").config(["$routeProvider",function(t){t.when("/register",{controller:"RegisterCtrl",templateUrl:"/templates/register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"/templates/login.html"}).when("/ask",{controller:"AskCtrl",templateUrl:"/templates/ask.html"}).when("/",{controller:"QuestionsCtrl",templateUrl:"/templates/questions.html"})}]),angular.module("app").service("UserSvc",["$http",function(t){var e=this;e.getUser=function(){return t.get("/api/users").then(function(t){return t.data})},e.login=function(n,o){return t.post("/api/sessions",{username:n,password:o}).then(function(n){return e.token=n.data.token,t.defaults.headers.common["X-Auth"]=n.data,e.getUser()})},e.register=function(n,o){return t.post("/api/users",{username:n,password:o}).then(function(){return e.login(n,o)})},e.logout=function(t){delete t.token}}]);
//# sourceMappingURL=data:application/json;base64,